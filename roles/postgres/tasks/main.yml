# This is copied from bahmni-playbooks and will be deleted after merged with bahmni.
- name: Check if postgres yum repo rpm is present
  stat: path={{postgres_repo_rpm_location}}
  register: postgresRepoRpm

- name: Download postgres yum repo rpm if not present
  command: "wget -q -O {{ postgres_repo_rpm_location }} {{postgres_repo_download_url}} creates={{ postgres_repo_rpm_location }}"
  when: postgresRepoRpm.stat.exists == false

- name: Install postgresql yum repository
  yum: name={{postgres_repo_rpm_location}} state=present

- name: Ensure PostgreSQL packages are installed.
  package:
    name: "{{ postgresql_packages | list }}"
    state: present

- name: Check if PostgreSQL database is initialized.
  stat:
    path: "{{ postgresql_data_dir }}/{{ postgres_version }}/data/base"
  register: pgdata_dir_version
  when: inventory_hostname in groups['bahmni-mart-db']

- copy:
    src: initdbfile
    dest: /tmp/initdbfile
    mode: 0777
    owner: postgres

- name: initdb
  command:  /usr/pgsql-9.6/bin/initdb --pgdata=/var/lib/pgsql/9.6/data --username=postgres --pwfile='/tmp/initdbfile'
  become_user: postgres
  when: not pgdata_dir_version.stat.exists

- name: Configure connection rules and postgres
  template: src={{ item.src }} dest={{ postgresql_data_dir }}/{{ postgres_version }}/data/{{ item.src | regex_replace(".j2") }}
  with_items:
  - { src: "postgresql.conf.j2" }
  - { src: "pg_hba.conf.j2" }
  notify: Restart PostgreSQL

- name: Start PostgreSQL
  service:
    name: postgresql-{{ postgres_version }}
    state: started
    enabled: yes

- name: Removing recovery config file from master db
  file:
      path=/var/lib/pgsql/{{ postgres_version }}/data/recovery.conf
      state=absent
  when: inventory_hostname in groups['bahmni-mart-db']
  register: recovery_conf

- name: Create analytics user
  postgresql_user:
    name: "{{ analytics_db_user }}"
    password: "{{ analytics_db_password }}"
    login_password: "{{ postgres_password }}"
  when: inventory_hostname in groups['bahmni-mart-db']

- block:

  - name: Get matched IpTable rule
    shell: iptables -nL --line-numbers | grep POSTGRES  -m 1 | cut -c 1-2
    register: matchedRule

  - name: delete matching rule if exists
    shell: iptables -D INPUT {{ matchedRule.stdout }}
    when: matchedRule.stdout!=""

  - name: Allow postgres port through firewall
    command: /sbin/iptables -I INPUT 1 -p tcp --dport  5432 -j ACCEPT -m comment --comment "POSTGRES"